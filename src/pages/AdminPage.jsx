import React, { useState, useEffect, useRef } from 'react';
import { Book, Edit, Settings, LogOut, PlusCircle, Trash2, Save, XCircle, Loader2, UploadCloud, Store, Palette, Tag, ArrowUp, ArrowDown, AlertTriangle } from 'lucide-react';

const API_URL = import.meta.env.VITE_API_BASE_URL || 'http://localhost:8080';

const translations = { zh: { options: { spice: { name: "辣度" }, sugar: { name: "甜度" }, ice: { name: "冰塊" }, size: { name: "份量" } } } };

const AdminPage = () => {
    const [isLoggedIn, setIsLoggedIn] = useState(false);
    const [password, setPassword] = useState('');
    const [error, setError] = useState('');
    const [activeTab, setActiveTab] = useState('instructions');

    const handleLogin = async (e) => { e.preventDefault(); try { const response = await fetch(`${API_URL}/api/admin/login`, { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ password }), }); if (response.ok) { sessionStorage.setItem('admin-auth', 'true'); setIsLoggedIn(true); setError(''); } else { setError('密碼錯誤，請重試。'); } } catch (err) { setError('登入失敗，請檢查後端伺服器是否正在運行。'); } };
    useEffect(() => { if (sessionStorage.getItem('admin-auth') === 'true') { setIsLoggedIn(true); } }, []);
    const handleLogout = () => { sessionStorage.removeItem('admin-auth'); setIsLoggedIn(false); };

    if (!isLoggedIn) {
        return (
            <div className="flex items-center justify-center min-h-screen bg-gray-100">
                <div className="p-8 bg-white rounded-lg shadow-md w-full max-w-sm">
                    <h1 className="text-2xl font-bold text-center mb-6">後台管理登入</h1>
                    <form onSubmit={handleLogin}>
                        <input type="password" value={password} onChange={(e) => setPassword(e.target.value)} placeholder="請輸入管理密碼" className="w-full px-4 py-2 border rounded-lg mb-4 focus:ring-blue-500 focus:border-blue-500" />
                        <button type="submit" className="w-full bg-blue-500 text-white py-2 rounded-lg hover:bg-blue-600 transition-colors">登入</button>
                        {error && <p className="text-red-500 text-sm text-center mt-4">{error}</p>}
                    </form>
                </div>
            </div>
        );
    }

    return (
        <div className="flex min-h-screen bg-gray-50 font-sans">
            <aside className="w-64 bg-gray-800 text-white p-4 flex flex-col">
                <h2 className="text-2xl font-semibold mb-8">管理後台</h2>
                <nav className="flex flex-col space-y-2">
                    <button onClick={() => setActiveTab('instructions')} className={`flex items-center gap-3 p-2 rounded-lg text-left ${activeTab === 'instructions' ? 'bg-gray-700' : 'hover:bg-gray-700'}`}><Book size={20} /> 使用說明</button>
                    <button onClick={() => setActiveTab('theme')} className={`flex items-center gap-3 p-2 rounded-lg text-left ${activeTab === 'theme' ? 'bg-gray-700' : 'hover:bg-gray-700'}`}><Palette size={20} /> 主題外觀</button>
                    <button onClick={() => setActiveTab('storefront')} className={`flex items-center gap-3 p-2 rounded-lg text-left ${activeTab === 'storefront' ? 'bg-gray-700' : 'hover:bg-gray-700'}`}><Store size={20} /> 店面設定</button>
                    <button onClick={() => setActiveTab('categories')} className={`flex items-center gap-3 p-2 rounded-lg text-left ${activeTab === 'categories' ? 'bg-gray-700' : 'hover:bg-gray-700'}`}><Tag size={20} /> 分類管理</button>
                    <button onClick={() => setActiveTab('menu')} className={`flex items-center gap-3 p-2 rounded-lg text-left ${activeTab === 'menu' ? 'bg-gray-700' : 'hover:bg-gray-700'}`}><Edit size={20} /> 菜單維護</button>
                    <button onClick={() => setActiveTab('settings')} className={`flex items-center gap-3 p-2 rounded-lg text-left ${activeTab === 'settings' ? 'bg-gray-700' : 'hover:bg-gray-700'}`}><Settings size={20} /> 功能開關</button>
                </nav>
                <button onClick={handleLogout} className="flex items-center gap-3 p-2 rounded-lg hover:bg-red-800 bg-red-600 mt-auto w-full text-left"><LogOut size={20} /> 登出</button>
            </aside>
            <main className="flex-1 p-8 overflow-y-auto">
                {activeTab === 'instructions' && <Instructions />}
                {activeTab === 'theme' && <ThemeSettings />}
                {activeTab === 'storefront' && <StorefrontSettings />}
                {activeTab === 'categories' && <CategoryManagement />}
                {activeTab === 'menu' && <MenuManagement />}
                {activeTab === 'settings' && <SettingsManagement />}
            </main>
        </div>
    );
};

const Instructions = () => ( <div> <h1 className="text-3xl font-bold mb-4">後台使用說明</h1> <div className="prose max-w-none bg-white p-6 rounded-lg shadow"> <p>歡迎使用點餐系統後台。您可以在這裡進行系統維護與設定。</p> <h2 className="mt-6">主題外觀</h2> <p>客製化您點餐頁面的外觀：</p> <ul> <li><strong>顏色設定</strong>：自由更換背景、標題欄、主要按鈕和文字的顏色。</li> <li><strong>背景圖片</strong>：上傳一張圖片作為點餐頁面的背景，打造獨特風格。</li> </ul> <h2 className="mt-6">店面設定</h2> <p>管理顧客看到的第一印象：</p> <ul> <li><strong>店家 Logo 設定</strong>：上傳您的 Logo，並選擇要在菜單頂部顯示 Logo 還是純文字店名。</li> <li><strong>最新消息公告管理</strong>：自由新增、編輯、刪除、排序您的圖文公告。</li> <li><strong>交易手續費設定</strong>：設定要向顧客收取的訂單手續費百分比。</li> </ul> <h2 className="mt-6">分類管理</h2> <p>管理您的菜單分類：</p> <ul> <li><strong>新增分類</strong>：建立新的分類，系統會自動使用 AI 翻譯成多國語言。</li> <li><strong>編輯/刪除分類</strong>：隨時更新您的分類名稱。</li> <li><strong>排序分類</strong>：透過「▲」和「▼」按鈕來調整分類在前台的顯示順序。</li> </ul> <h2 className="mt-6">菜單維護</h2> <p>在此頁面，您可以：</p> <ul> <li><strong>新增餐點 (AI翻譯)</strong>：只需填寫中文，系統將自動翻譯成多國語言。</li> <li><strong>上傳圖片</strong>：為每個餐點直接上傳圖片，或貼上圖片網址。</li> <li><strong>編輯/刪除餐點</strong>：隨時更新您的菜單內容。</li> </ul> <h2 className="mt-6">功能開關</h2> <p>在此頁面，您可以即時開啟或關閉特定功能，例如 AI 推薦、訂單儲存方式等。</p> </div> </div> );
const SettingsManagement = () => { const [settings, setSettings] = useState(null); const [error, setError] = useState(''); useEffect(() => { fetch(`${API_URL}/api/admin/settings`).then(res => res.json()).then(data => setSettings(data)); }, []); const handleToggle = async (key) => { const tempSettings = { ...settings, [key]: !settings[key] }; if (key === 'saveToDatabase' || key === 'saveToGoogleSheet') { if (!tempSettings.saveToDatabase && !tempSettings.saveToGoogleSheet) { setError('錯誤：必須至少啟用一種訂單儲存方式！'); setTimeout(() => setError(''), 3000); return; } } setError(''); setSettings(tempSettings); await fetch(`${API_URL}/api/admin/settings`, { method: 'PUT', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ [key]: tempSettings[key] }), }); }; if (!settings) return <div className="flex items-center gap-2"><Loader2 className="animate-spin" /> 正在載入設定...</div>; return ( <div> <h1 className="text-3xl font-bold mb-4">功能開關</h1> {error && <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative mb-4" role="alert">{error}</div>} <div className="space-y-4 max-w-md"> <div className="flex items-center justify-between p-4 bg-white rounded-lg shadow"> <span className="font-medium">儲存訂單至資料庫</span> <label className="relative inline-flex items-center cursor-pointer"> <input type="checkbox" checked={!!settings.saveToDatabase} onChange={() => handleToggle('saveToDatabase')} className="sr-only peer" /> <div className="w-11 h-6 bg-gray-200 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-0.5 after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-blue-600"></div> </label> </div> <div className="flex items-center justify-between p-4 bg-white rounded-lg shadow"> <span className="font-medium">儲存訂單至 Google Sheet</span> <label className="relative inline-flex items-center cursor-pointer"> <input type="checkbox" checked={!!settings.saveToGoogleSheet} onChange={() => handleToggle('saveToGoogleSheet')} className="sr-only peer" /> <div className="w-11 h-6 bg-gray-200 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-0.5 after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-blue-600"></div> </label> </div> <div className="flex items-center justify-between p-4 bg-white rounded-lg shadow"> <span className="font-medium">AI 推薦功能</span> <label className="relative inline-flex items-center cursor-pointer"> <input type="checkbox" checked={!!settings.isAiEnabled} onChange={() => handleToggle('isAiEnabled')} className="sr-only peer" /> <div className="w-11 h-6 bg-gray-200 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-0.5 after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-blue-600"></div> </label> </div> </div> </div> ); };
const MenuManagement = () => { const [menu, setMenu] = useState([]); const [categories, setCategories] = useState([]); const [editingItem, setEditingItem] = useState(null); const [isLoading, setIsLoading] = useState(true); const [error, setError] = useState(null); const fetchMenuData = () => { setIsLoading(true); setError(null); Promise.all([ fetch(`${API_URL}/api/menu`), fetch(`${API_URL}/api/admin/categories`) ]).then(async([menuRes, catRes]) => { if (!menuRes.ok || !catRes.ok) throw new Error('無法載入菜單或分類資料'); const menuData = await menuRes.json(); const catData = await catRes.json(); const flatMenu = Object.values(menuData.menu).flat().sort((a, b) => a.id - b.id); setMenu(flatMenu); setCategories(catData); }).catch(err => setError(err.message)).finally(() => setIsLoading(false)); }; useEffect(fetchMenuData, []); const handleDelete = async (id) => { if (window.confirm('確定要刪除這個品項嗎？此操作無法復原。')) { await fetch(`${API_URL}/api/menu_items/${id}`, { method: 'DELETE' }); fetchMenuData(); } }; const handleSave = () => { setEditingItem(null); fetchMenuData(); }; if (isLoading) return <div className="flex items-center gap-2"><Loader2 className="animate-spin" /> 正在載入菜單資料...</div>; if (error) return <div className="bg-red-100 border-l-4 border-red-500 text-red-700 p-4" role="alert"><p>{error}</p></div>; return ( <div> <div className="flex justify-between items-center mb-4"> <h1 className="text-3xl font-bold">菜單維護</h1> <button onClick={() => setEditingItem({ isNew: true, name: { zh: '', en: '' }, description: { zh: '', en: '' }, price: '', category_key: categories[0]?.key || '', image: '', options: '' })} className="bg-green-500 text-white px-4 py-2 rounded-lg flex items-center gap-2 hover:bg-green-600 transition-colors" disabled={categories.length === 0}> <PlusCircle size={20} /> 新增餐點 </button> </div> {categories.length === 0 && <div className="bg-yellow-100 border-l-4 border-yellow-500 text-yellow-700 p-4" role="alert"><p>請先至「分類管理」新增至少一個分類，才能新增餐點。</p></div>} {editingItem && <MenuItemForm item={editingItem} categories={categories} onSave={handleSave} onCancel={() => setEditingItem(null)} />} <div className="bg-white shadow rounded-lg mt-6"> <ul className="divide-y divide-gray-200"> {menu.map(item => ( <li key={item.id} className="p-4 flex items-center justify-between hover:bg-gray-50"> <div className="flex items-center gap-4"> <img src={item.image || 'https://placehold.co/100x100?text=No+Image'} alt={item.name.zh} className="w-16 h-16 object-cover rounded bg-gray-100"/> <div> <p className="font-bold">{item.name.zh} ({item.name.en})</p> <p className="text-sm text-gray-500">${item.price}</p> </div> </div> <div className="flex items-center gap-2"> <button onClick={() => setEditingItem(item)} className="p-2 text-blue-600 hover:text-blue-800"><Edit /></button> <button onClick={() => handleDelete(item.id)} className="p-2 text-red-600 hover:text-red-800"><Trash2 /></button> </div> </li> ))} </ul> </div> </div> ); };
const MenuItemForm = ({ item, categories, onSave, onCancel }) => { const [formData, setFormData] = useState(item); const [isSubmitting, setIsSubmitting] = useState(false); const [isUploading, setIsUploading] = useState(false); const fileInputRef = useRef(null); const [availableOptions, setAvailableOptions] = useState({}); useEffect(() => { const initialOptions = { spice: false, sugar: false, ice: false, size: false }; if (item && item.options) { const optionsArray = Array.isArray(item.options) ? item.options : String(item.options).split(','); optionsArray.forEach(opt => { if (opt in initialOptions) { initialOptions[opt] = true; } }); } setAvailableOptions(initialOptions); setFormData(item); }, [item]); const handleChange = (e) => { const { name, value } = e.target; setFormData(prev => ({ ...prev, [name]: value })); }; const handleOptionChange = (e) => { const { name, checked } = e.target; setAvailableOptions(prev => ({ ...prev, [name]: checked })); }; const handleImageUpload = async (file) => { if (!file) return; setIsUploading(true); const uploadFormData = new FormData(); uploadFormData.append('image', file); try { const response = await fetch(`${API_URL}/api/admin/upload-image`, { method: 'POST', body: uploadFormData, }); const data = await response.json(); if (response.ok) { setFormData(prev => ({ ...prev, image: data.imageUrl })); } else { alert(`圖片上傳失敗: ${data.message}`); } } catch (error) { alert('圖片上傳時發生網路錯誤'); } finally { setIsUploading(false); } }; const handleSubmit = async (e) => { e.preventDefault(); setIsSubmitting(true); const optionsString = Object.keys(availableOptions).filter(key => availableOptions[key]).join(','); if (item.isNew) { const payload = { name_zh: formData.name.zh, description_zh: formData.description.zh, price: parseInt(formData.price, 10), category_key: formData.category_key, image: formData.image, options: optionsString, }; await fetch(`${API_URL}/api/admin/translate-and-add-item`, { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(payload), }); } else { const payload = { ...formData, name: formData.name, description: formData.description, price: parseInt(formData.price, 10), category_key: formData.category_key, image: formData.image, options: optionsString }; await fetch(`${API_URL}/api/menu_items/${item.id}`, { method: 'PUT', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(payload), }); } setIsSubmitting(false); onSave(); }; return ( <div className="fixed inset-0 bg-black bg-opacity-50 flex justify-center items-center z-50 p-4"> <form onSubmit={handleSubmit} className="bg-white p-6 rounded-lg shadow-xl w-full max-w-2xl max-h-[90vh] overflow-y-auto"> <h2 className="text-2xl font-bold mb-6">{item.isNew ? '新增餐點 (AI自動翻譯)' : '編輯餐點'}</h2> <div className="grid grid-cols-1 md:grid-cols-2 gap-4"> <div><label className="block text-sm font-medium text-gray-700">中文名稱*</label><input type="text" value={formData.name?.zh || ''} onChange={e => setFormData({...formData, name: {...formData.name, zh: e.target.value}})} className="mt-1 w-full p-2 border rounded-md" required /></div> <div><label className="block text-sm font-medium text-gray-700">價格*</label><input type="number" name="price" value={formData.price || ''} onChange={handleChange} className="mt-1 w-full p-2 border rounded-md" required /></div> <div className="md:col-span-2"><label className="block text-sm font-medium text-gray-700">中文描述</label><textarea value={formData.description?.zh || ''} onChange={e => setFormData({...formData, description: {...formData.description, zh: e.target.value}})} className="mt-1 w-full p-2 border rounded-md" rows="2"></textarea></div> <div><label className="block text-sm font-medium text-gray-700">分類*</label><select name="category_key" value={formData.category_key} onChange={handleChange} className="mt-1 w-full p-2 border rounded-md bg-white"> {categories.map(cat => <option key={cat.key} value={cat.key}>{cat.name.zh}</option>)} </select></div> <div className="md:col-span-2"><label className="block text-sm font-medium text-gray-700">圖片</label><div className="mt-1 flex items-center gap-4"><img src={formData.image || 'https://placehold.co/100x100/f0f0f0/ccc?text=No+Image'} alt="Preview" className="w-24 h-24 object-cover rounded-md bg-gray-100" /><div className="flex-1"><input type="text" name="image" value={formData.image || ''} onChange={handleChange} className="w-full p-2 border rounded-md" placeholder="請貼上圖片網址或從下方上傳"/><button type="button" onClick={() => fileInputRef.current.click()} disabled={isUploading} className="cursor-pointer mt-2 inline-flex items-center gap-2 bg-white px-3 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed">{isUploading ? <Loader2 className="animate-spin" /> : <UploadCloud size={16} />}{isUploading ? '上傳中...' : '或選擇檔案上傳'}</button><input ref={fileInputRef} id="image-upload" type="file" className="sr-only" onChange={(e) => handleImageUpload(e.target.files[0])} accept="image/png, image/jpeg, image/webp" /></div></div></div> <div className="md:col-span-2"><label className="block text-sm font-medium text-gray-700">可用選項</label><div className="mt-2 flex flex-wrap gap-x-4 gap-y-2">{Object.keys(availableOptions).map(opt => ( <label key={opt} className="flex items-center gap-2"><input type="checkbox" name={opt} checked={!!availableOptions[opt]} onChange={handleOptionChange} className="h-4 w-4 rounded border-gray-300 text-blue-600 focus:ring-blue-500" /><span>{translations.zh.options[opt]?.name || opt}</span></label>))}</div></div> </div> <div className="flex justify-end gap-4 mt-6 pt-4 border-t"><button type="button" onClick={onCancel} disabled={isSubmitting} className="bg-gray-200 px-4 py-2 rounded-lg flex items-center gap-2 hover:bg-gray-300 transition-colors disabled:opacity-50"><XCircle size={20} /> 取消</button><button type="submit" disabled={isSubmitting || isUploading} className="bg-blue-500 text-white px-4 py-2 rounded-lg flex items-center gap-2 hover:bg-blue-600 transition-colors disabled:bg-blue-300 disabled:cursor-wait">{isSubmitting ? <Loader2 className="animate-spin" size={20} /> : <Save size={20} />} {isSubmitting ? '儲存中...' : '儲存'}</button></div> </form> </div> ); };
const StorefrontSettings = () => { const [settings, setSettings] = useState({}); const [announcements, setAnnouncements] = useState([]); const [isLoading, setIsLoading] = useState(true); const [isSaving, setIsSaving] = useState(false); const [error, setError] = useState(null); const logoFileInputRef = useRef(null); useEffect(() => { const loadData = async () => { setIsLoading(true); setError(null); try { const [settingsRes, announcementsRes] = await Promise.all([ fetch(`${API_URL}/api/admin/settings`), fetch(`${API_URL}/api/admin/announcements`) ]); if (!settingsRes.ok || !announcementsRes.ok) throw new Error('無法載入設定或公告資料'); const settingsData = await settingsRes.json(); const announcementsData = await announcementsRes.json(); setSettings(settingsData); setAnnouncements(announcementsData); } catch (error) { console.error("Error loading storefront data:", error); setError(error.message); } finally { setIsLoading(false); } }; loadData(); }, []); const handleSettingChange = (key, value) => { setSettings(prev => ({ ...prev, [key]: value })); }; const handleAnnouncementChange = (id, field, value) => { setAnnouncements(prev => prev.map(ann => ann.id === id ? { ...ann, [field]: value } : ann)); }; const handleImageUpload = async (file, callback) => { if (!file) return; const uploadFormData = new FormData(); uploadFormData.append('image', file); try { const response = await fetch(`${API_URL}/api/admin/upload-image`, { method: 'POST', body: uploadFormData }); const data = await response.json(); if (response.ok) { callback(data.imageUrl); } else { alert(`圖片上傳失敗: ${data.message}`); } } catch (error) { alert('圖片上傳時發生網路錯誤'); } }; const handleAddNewAnnouncement = () => { const newAnnouncement = { id: `new-${Date.now()}`, image: '', text: '', isNew: true }; setAnnouncements(prev => [...prev, newAnnouncement]); }; const handleRemoveAnnouncement = (id) => { setAnnouncements(prev => prev.filter(ann => ann.id !== id)); }; const handleMoveAnnouncement = async (index, direction) => { if ((index === 0 && direction === -1) || (index === announcements.length - 1 && direction === 1)) return; const newAnnouncements = [...announcements]; const [movedItem] = newAnnouncements.splice(index, 1); newAnnouncements.splice(index + direction, 0, movedItem); setAnnouncements(newAnnouncements); const orderedIds = newAnnouncements.map(item => item.id); await fetch(`${API_URL}/api/admin/announcements/order`, { method: 'PUT', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ orderedIds }) }); }; const handleSaveAll = async () => { setIsSaving(true); try { await fetch(`${API_URL}/api/admin/settings`, { method: 'PUT', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(settings) }); const originalAnnouncements = await (await fetch(`${API_URL}/api/admin/announcements`)).json(); const currentIds = new Set(announcements.filter(a => !a.isNew).map(a => a.id)); const announcementsToDelete = originalAnnouncements.filter(origAnn => !currentIds.has(origAnn.id)); for (const ann of announcementsToDelete) { await fetch(`${API_URL}/api/admin/announcements/${ann.id}`, { method: 'DELETE' }); } let finalAnnouncements = []; for (const ann of announcements) { const payload = { image: ann.image, text: ann.text }; if (ann.isNew) { const res = await fetch(`${API_URL}/api/admin/announcements`, { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(payload) }); const newAnn = await res.json(); finalAnnouncements.push(newAnn); } else { await fetch(`${API_URL}/api/admin/announcements/${ann.id}`, { method: 'PUT', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(payload) }); finalAnnouncements.push(ann); } } const orderedIds = announcements.map(clientAnn => { const found = finalAnnouncements.find(dbAnn => dbAnn.id === clientAnn.id || (clientAnn.isNew && dbAnn.text === clientAnn.text && dbAnn.image === clientAnn.image)); return found?.id; }).filter(Boolean); await fetch(`${API_URL}/api/admin/announcements/order`, { method: 'PUT', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ orderedIds }) }); alert('所有設定已儲存！'); const updatedAnnouncements = await (await fetch(`${API_URL}/api/admin/announcements`)).json(); setAnnouncements(updatedAnnouncements); } catch (error) { console.error("儲存失敗:", error); alert("儲存失敗，請檢查主控台。"); } finally { setIsSaving(false); } }; if (isLoading) return <div className="flex items-center gap-2"><Loader2 className="animate-spin" /> 正在載入店面設定...</div>; if (error) return <div className="bg-red-100 border-l-4 border-red-500 text-red-700 p-4" role="alert"><p><strong>錯誤：</strong>{error}</p></div>; return ( <div> <h1 className="text-3xl font-bold mb-6">店面設定</h1> <div className="bg-white p-6 rounded-lg shadow mb-6"> <h2 className="text-xl font-semibold mb-4">店家 Logo 設定</h2> <div className="flex items-center gap-2 mb-4"> <input type="checkbox" id="useLogo" checked={!!settings.useLogo} onChange={(e) => handleSettingChange('useLogo', e.target.checked)} className="h-4 w-4 rounded" /> <label htmlFor="useLogo">在菜單頁面使用 Logo 取代文字標題</label> </div> <div className={`transition-opacity duration-300 ${settings.useLogo ? 'opacity-100' : 'opacity-50 pointer-events-none'}`}> <label className="block text-sm font-medium text-gray-700">Logo 圖片</label> <div className="mt-1 flex items-center gap-4"> <img src={settings.logoUrl || 'https://placehold.co/150x50/f0f0f0/ccc?text=Logo'} alt="Logo Preview" className="h-16 bg-gray-100 rounded p-1" /> <div className="flex-1"> <input type="text" value={settings.logoUrl || ''} onChange={(e) => handleSettingChange('logoUrl', e.target.value)} className="w-full p-2 border rounded-md" placeholder="請貼上圖片網址或從下方上傳"/> <button type="button" onClick={() => logoFileInputRef.current.click()} className="cursor-pointer mt-2 inline-flex items-center gap-2 bg-white px-3 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 hover:bg-gray-50"> <UploadCloud size={16} /> 上傳 Logo </button> <input ref={logoFileInputRef} type="file" className="sr-only" onChange={(e) => handleImageUpload(e.target.files[0], (url) => handleSettingChange('logoUrl', url))} accept="image/png, image/jpeg, image/webp" /> </div> </div> </div> </div> <div className="bg-white p-6 rounded-lg shadow mb-6"> <h2 className="text-xl font-semibold mb-4">最新消息公告管理</h2> <div className="space-y-4"> {announcements.map((ann, index) => ( <div key={ann.id} className="flex items-start gap-4 p-4 border rounded-md bg-gray-50"> <div className="flex flex-col items-center gap-1 mt-10"> <button onClick={() => handleMoveAnnouncement(index, -1)} disabled={index === 0} className="p-1 text-gray-500 hover:text-gray-800 disabled:opacity-30"><ArrowUp size={20} /></button> <button onClick={() => handleMoveAnnouncement(index, 1)} disabled={index === announcements.length - 1} className="p-1 text-gray-500 hover:text-gray-800 disabled:opacity-30"><ArrowDown size={20} /></button> </div> <div className="flex-1"> <label className="block text-sm font-medium text-gray-700">公告圖片</label> <div className="flex items-center gap-2 mt-1"> <img src={ann.image || 'https://placehold.co/200x100/f0f0f0/ccc?text=No+Image'} alt="Announcement Preview" className="w-24 h-24 object-cover rounded-md bg-gray-100" /> <button type="button" onClick={() => { const fileInput = document.getElementById(`ann-img-${ann.id}`); if(fileInput) fileInput.click(); }} className="cursor-pointer inline-flex items-center gap-2 bg-white px-3 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 hover:bg-gray-50"> <UploadCloud size={16} /> 上傳 </button> <input id={`ann-img-${ann.id}`} type="file" className="sr-only" onChange={(e) => handleImageUpload(e.target.files[0], (url) => handleAnnouncementChange(ann.id, 'image', url))} /> </div> <label className="block text-sm font-medium text-gray-700 mt-2">公告文字</label> <textarea value={ann.text || ''} onChange={(e) => handleAnnouncementChange(ann.id, 'text', e.target.value)} className="mt-1 w-full p-2 border rounded-md" rows="3"></textarea> </div> <button onClick={() => handleRemoveAnnouncement(ann.id)} className="text-red-500 hover:text-red-700"><Trash2 size={20} /></button> </div> ))} </div> <button onClick={handleAddNewAnnouncement} className="mt-4 inline-flex items-center gap-2 bg-gray-100 px-4 py-2 border border-gray-300 rounded-md text-sm font-medium text-gray-800 hover:bg-gray-200"> <PlusCircle size={16} /> 新增一則公告 </button> </div> <div className="bg-white p-6 rounded-lg shadow"> <h2 className="text-xl font-semibold mb-4">交易手續費設定</h2> <label className="block text-sm font-medium text-gray-700">手續費 (%)</label> <input type="number" value={settings.transactionFeePercent || 0} onChange={e => handleSettingChange('transactionFeePercent', e.target.value)} className="mt-1 w-full max-w-xs p-2 border rounded-md" min="0" step="0.1" /> <p className="text-xs text-gray-500 mt-1">設定顧客結帳時，需額外支付的交易手續費百分比。輸入 5 代表 5%。</p> </div> <div className="mt-8 text-right"> <button onClick={handleSaveAll} disabled={isSaving} className="bg-blue-600 text-white px-6 py-2 rounded-lg flex items-center justify-center gap-2 hover:bg-blue-700 transition-colors disabled:bg-blue-300"> {isSaving ? <Loader2 className="animate-spin" /> : <Save />} {isSaving ? '儲存中...' : '儲存所有設定'} </button> </div> </div> ); };
const ThemeSettings = () => { const [settings, setSettings] = useState({}); const [isSaving, setIsSaving] = useState(false); const bgFileInputRef = useRef(null); useEffect(() => { fetch(`${API_URL}/api/admin/settings`).then(res => res.json()).then(data => setSettings(data)); }, []); const handleSettingChange = (key, value) => { setSettings(prev => ({ ...prev, [key]: value })); }; const handleImageUpload = async (e) => { const file = e.target.files[0]; if (!file) return; const uploadFormData = new FormData(); uploadFormData.append('image', file); try { const response = await fetch(`${API_URL}/api/admin/upload-image`, { method: 'POST', body: uploadFormData }); const data = await response.json(); if (response.ok) { handleSettingChange('themeBgImageUrl', data.imageUrl); } else { alert(`圖片上傳失敗: ${data.message}`); } } catch (error) { alert('圖片上傳時發生網路錯誤'); } }; const handleSave = async () => { setIsSaving(true); const themeSettings = { themeBgColor: settings.themeBgColor, themeHeaderColor: settings.themeHeaderColor, themeTextColor: settings.themeTextColor, themePrimaryColor: settings.themePrimaryColor, themeItemBgColor: settings.themeItemBgColor, themeBgImageUrl: settings.themeBgImageUrl, }; await fetch(`${API_URL}/api/admin/settings`, { method: 'PUT', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(themeSettings), }); setIsSaving(false); alert('主題外觀已儲存！'); }; return ( <div> <h1 className="text-3xl font-bold mb-6">主題外觀設定</h1> <div className="bg-white p-6 rounded-lg shadow space-y-6"> <div> <h3 className="text-lg font-medium mb-2">顏色設定</h3> <div className="grid grid-cols-2 md:grid-cols-3 gap-4"> <div><label className="block text-sm text-gray-600">頁面背景色</label><input type="color" value={settings.themeBgColor || '#F9FAFB'} onChange={(e) => handleSettingChange('themeBgColor', e.target.value)} className="w-full h-10 p-1 border rounded" /></div> <div><label className="block text-sm text-gray-600">標題欄背景</label><input type="color" value={settings.themeHeaderColor || '#FFFFFF'} onChange={(e) => handleSettingChange('themeHeaderColor', e.target.value)} className="w-full h-10 p-1 border rounded" /></div> <div><label className="block text-sm text-gray-600">品項卡片背景</label><input type="color" value={settings.themeItemBgColor || '#FFFFFF'} onChange={(e) => handleSettingChange('themeItemBgColor', e.target.value)} className="w-full h-10 p-1 border rounded" /></div> <div><label className="block text-sm text-gray-600">主要文字顏色</label><input type="color" value={settings.themeTextColor || '#1F2937'} onChange={(e) => handleSettingChange('themeTextColor', e.target.value)} className="w-full h-10 p-1 border rounded" /></div> <div><label className="block text-sm text-gray-600">主色調 (按鈕等)</label><input type="color" value={settings.themePrimaryColor || '#F97316'} onChange={(e) => handleSettingChange('themePrimaryColor', e.target.value)} className="w-full h-10 p-1 border rounded" /></div> </div> </div> <div> <h3 className="text-lg font-medium mb-2">背景圖片</h3> <div className="flex items-center gap-4"> <img src={settings.themeBgImageUrl || 'https://placehold.co/200x100/f0f0f0/ccc?text=No+Bg+Image'} alt="Background Preview" className="w-48 h-24 object-cover rounded-md bg-gray-100" /> <div className="flex-1"> <input type="text" value={settings.themeBgImageUrl || ''} onChange={(e) => handleSettingChange('themeBgImageUrl', e.target.value)} className="w-full p-2 border rounded-md" placeholder="貼上圖片網址或上傳"/> <button type="button" onClick={() => bgFileInputRef.current.click()} className="cursor-pointer mt-2 inline-flex items-center gap-2 bg-white px-3 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 hover:bg-gray-50"> <UploadCloud size={16} /> 上傳背景圖 </button> <input ref={bgFileInputRef} type="file" className="sr-only" onChange={handleImageUpload} accept="image/*" /> </div> </div> </div> </div> <div className="mt-8 text-right"> <button onClick={handleSave} disabled={isSaving} className="bg-blue-600 text-white px-6 py-2 rounded-lg flex items-center justify-center gap-2 hover:bg-blue-700 transition-colors disabled:bg-blue-300"> {isSaving ? <Loader2 className="animate-spin" /> : <Save />} {isSaving ? '儲存中...' : '儲存主題設定'} </button> </div> </div> ); };
const CategoryManagement = () => { const [categories, setCategories] = useState([]); const [editingCategory, setEditingCategory] = useState(null); const [isLoading, setIsLoading] = useState(true); const [error, setError] = useState(null); const fetchCategories = () => { setIsLoading(true); setError(null); fetch(`${API_URL}/api/admin/categories`).then(res => { if (!res.ok) throw new Error("無法載入分類資料"); return res.json(); }).then(data => { setCategories(data); }).catch(err => setError(err.message)).finally(() => setIsLoading(false)); }; useEffect(fetchCategories, []); const handleSave = () => { setEditingCategory(null); fetchCategories(); }; const handleDelete = async (id) => { if (window.confirm('確定要刪除這個分類嗎？分類下的所有餐點將會被取消分類。')) { await fetch(`${API_URL}/api/admin/categories/${id}`, { method: 'DELETE' }); fetchCategories(); } }; const handleMove = async (index, direction) => { if ((index === 0 && direction === -1) || (index === categories.length - 1 && direction === 1)) return; const newCategories = [...categories]; const [movedItem] = newCategories.splice(index, 1); newCategories.splice(index + direction, 0, movedItem); setCategories(newCategories); const orderedIds = newCategories.map(cat => cat.id); await fetch(`${API_URL}/api/admin/categories/order`, { method: 'PUT', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ orderedIds }) }); }; if (isLoading) return <div className="flex items-center gap-2"><Loader2 className="animate-spin" /> 正在載入分類資料...</div>; if (error) return <div className="bg-red-100 border-l-4 border-red-500 text-red-700 p-4" role="alert"><p><strong>錯誤：</strong>{error}</p></div>; return ( <div> <div className="flex justify-between items-center mb-4"> <h1 className="text-3xl font-bold">分類管理</h1> <button onClick={() => setEditingCategory({ isNew: true, key: '', name: { zh: '' } })} className="bg-green-500 text-white px-4 py-2 rounded-lg flex items-center gap-2 hover:bg-green-600 transition-colors"> <PlusCircle size={20} /> 新增分類 </button> </div> <p className="text-gray-600 mt-1 mb-4">使用上下箭頭調整前台顯示順序。</p> {editingCategory && <CategoryForm category={editingCategory} onSave={handleSave} onCancel={() => setEditingCategory(null)} />} <div className="bg-white shadow rounded-lg mt-6"> <ul className="divide-y divide-gray-200"> {categories.map((cat, index) => ( <li key={cat.id} className="p-4 flex items-center justify-between hover:bg-gray-50"> <div className="flex items-center gap-4"> <div> <p className="font-bold">{cat.name.zh} ({cat.name.en})</p> <p className="text-sm text-gray-500">Key: {cat.key}</p> </div> </div> <div className="flex items-center gap-4"> <div className="flex flex-col"> <button onClick={() => handleMove(index, -1)} disabled={index === 0} className="p-1 text-gray-500 hover:text-gray-800 disabled:opacity-30"><ArrowUp size={20} /></button> <button onClick={() => handleMove(index, 1)} disabled={index === categories.length - 1} className="p-1 text-gray-500 hover:text-gray-800 disabled:opacity-30"><ArrowDown size={20} /></button> </div> <button onClick={() => setEditingCategory(cat)} className="p-2 text-blue-600 hover:text-blue-800"><Edit /></button> <button onClick={() => handleDelete(cat.id)} className="p-2 text-red-600 hover:text-red-800"><Trash2 /></button> </div> </li> ))} </ul> </div> </div> ); };
const CategoryForm = ({ category, onSave, onCancel }) => { const [formData, setFormData] = useState(category); const [isSubmitting, setIsSubmitting] = useState(false); const [error, setError] = useState(''); useEffect(() => { setFormData(category); }, [category]); const handleSubmit = async (e) => { e.preventDefault(); setIsSubmitting(true); setError(''); try { let response; if (category.isNew) { response = await fetch(`${API_URL}/api/admin/categories`, { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ key: formData.key, name_zh: formData.name.zh }) }); } else { response = await fetch(`${API_URL}/api/admin/categories/${category.id}`, { method: 'PUT', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ key: formData.key, name: formData.name, name_zh: formData.name.zh }) }); } if (!response.ok) { const errData = await response.json(); throw new Error(errData.message || '操作失敗'); } onSave(); } catch (err) { setError(err.message); } finally { setIsSubmitting(false); } }; return ( <div className="fixed inset-0 bg-black bg-opacity-50 flex justify-center items-center z-50 p-4"> <form onSubmit={handleSubmit} className="bg-white p-6 rounded-lg shadow-xl w-full max-w-lg"> <h2 className="text-2xl font-bold mb-6">{category.isNew ? '新增分類 (AI自動翻譯)' : '編輯分類'}</h2> {error && <div className="bg-red-100 text-red-700 p-3 rounded-md mb-4">{error}</div>} <div className="space-y-4"> <div> <label className="block text-sm font-medium text-gray-700">分類 Key* (英文, 不可重複)</label> <input type="text" value={formData.key || ''} onChange={e => setFormData({...formData, key: e.target.value})} className="mt-1 w-full p-2 border rounded-md" placeholder="e.g., main-course" required disabled={!category.isNew} /> </div> <div> <label className="block text-sm font-medium text-gray-700">中文名稱*</label> <input type="text" value={formData.name.zh || ''} onChange={e => setFormData({...formData, name: {...formData.name, zh: e.target.value}})} className="mt-1 w-full p-2 border rounded-md" required /> </div> </div> <div className="flex justify-end gap-4 mt-6 pt-4 border-t"> <button type="button" onClick={onCancel} disabled={isSubmitting} className="bg-gray-200 px-4 py-2 rounded-lg flex items-center gap-2 hover:bg-gray-300 transition-colors disabled:opacity-50"><XCircle size={20} /> 取消</button> <button type="submit" disabled={isSubmitting} className="bg-blue-500 text-white px-4 py-2 rounded-lg flex items-center gap-2 hover:bg-blue-600 transition-colors disabled:bg-blue-300"> {isSubmitting ? <Loader2 className="animate-spin" size={20} /> : <Save size={20} />} {isSubmitting ? '儲存中...' : '儲存'} </button> </div> </form> </div> ); };

export default AdminPage;
